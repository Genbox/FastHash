is_global = true

# Docs
# CAXXXX        Microsoft     https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/
# SXXXX         Sonar         https://rules.sonarsource.com/csharp/
# REFLXXX       Reflection    https://github.com/DotNetAnalyzers/ReflectionAnalyzers
# RCSXXXX       Roslynator    https://josefpihrt.github.io/docs/roslynator/analyzers
# MAXXXX        Meziantou     https://github.com/meziantou/Meziantou.Analyzer/tree/main
# IDISPXXX      IDisposable   https://github.com/DotNetAnalyzers/IDisposableAnalyzers/blob/master/README.md
# GUXXXX        GU            https://github.com/GuOrg/Gu.Analyzers
# SSXXXX        SharpSource   https://github.com/Vannevelj/SharpSource
# ERPXXX        ErrorProne    https://github.com/SergeyTeplyakov/ErrorProne.NET
# ERPXXX        VS threading  https://github.com/microsoft/vs-threading/tree/main
# AsyncFixerXX  AsyncFixer    https://github.com/semihokur/AsyncFixer
# HLQXXX        Hyperlinq     https://github.com/NetFabric/NetFabric.Hyperlinq

# Documented duplicates according to https://github.com/meziantou/Meziantou.Analyzer/blob/main/docs/comparison-with-other-analyzers.md
dotnet_diagnostic.MA0010.severity = none # Duplicate of CA1018
dotnet_diagnostic.MA0097.severity = none # Duplicate of CA1036
dotnet_diagnostic.MA0047.severity = none # Duplicate of CA1050
dotnet_diagnostic.MA0013.severity = none # Duplicate of CA1058
dotnet_diagnostic.MA0072.severity = none # Duplicate of CA1065
dotnet_diagnostic.MA0086.severity = none # Duplicate of CA1065
dotnet_diagnostic.MA0095.severity = none # Duplicate of CA1067
dotnet_diagnostic.MA0011.severity = none # Duplicate of CA1304
dotnet_diagnostic.MA0011.severity = none # Duplicate of CA1305
dotnet_diagnostic.MA0001.severity = none # Duplicate of CA1307
dotnet_diagnostic.MA0074.severity = none # Duplicate of CA1307
dotnet_diagnostic.MA0001.severity = none # Duplicate of CA1309
dotnet_diagnostic.MA0074.severity = none # Duplicate of CA1309
dotnet_diagnostic.MA0001.severity = none # Duplicate of CA1310
dotnet_diagnostic.MA0057.severity = none # Duplicate of CA1710
dotnet_diagnostic.MA0058.severity = none # Duplicate of CA1710
dotnet_diagnostic.MA0059.severity = none # Duplicate of CA1710
dotnet_diagnostic.MA0049.severity = none # Duplicate of CA1724
dotnet_diagnostic.MA0005.severity = none # Duplicate of CA1825
dotnet_diagnostic.MA0020.severity = none # Duplicate of CA1826
dotnet_diagnostic.MA0028.severity = none # Duplicate of CA1830
dotnet_diagnostic.MA0028.severity = none # Duplicate of CA1834
dotnet_diagnostic.MA0027.severity = none # Duplicate of CA2200
dotnet_diagnostic.MA0012.severity = none # Duplicate of CA2201
dotnet_diagnostic.MA0014.severity = none # Duplicate of CA2201
dotnet_diagnostic.MA0015.severity = none # Duplicate of CA2208
dotnet_diagnostic.MA0069.severity = none # Duplicate of CA2211
dotnet_diagnostic.MA0056.severity = none # Duplicate of CA2214
dotnet_diagnostic.MA0062.severity = none # Duplicate of CA2217
dotnet_diagnostic.MA0072.severity = none # Duplicate of CA2219
dotnet_diagnostic.MA0082.severity = none # Duplicate of CA2242
dotnet_diagnostic.MA0039.severity = none # Duplicate of CA5359
dotnet_diagnostic.MA0017.severity = none # Duplicate of S3442
dotnet_diagnostic.MA0087.severity = none # Duplicate of S3450
dotnet_diagnostic.MA0047.severity = none # Duplicate of S3903
dotnet_diagnostic.MA0007.severity = none # Duplicate of SA1413
dotnet_diagnostic.MA0048.severity = none # Duplicate of SA1649
dotnet_diagnostic.CA1000.severity = none # Duplicate of MA0018 - CA can also be configured to run against non-public API surface
dotnet_diagnostic.CA1002.severity = none # Duplicate of MA0016 - CA only applies to List<T>
dotnet_diagnostic.CA1003.severity = none # Duplicate of MA0046 - CA only applies to public types by default (can be configured)
dotnet_diagnostic.CA1052.severity = none # Duplicate of MA0036 - CA can be configured to only run against specific API surfaces
dotnet_diagnostic.CA1815.severity = none # Duplicate of MA0065 - MA reports only when Equals or GetHashCode is used
dotnet_diagnostic.CA1815.severity = none # Duplicate of MA0066 - MA reports only when the struct is used with HashSet types
dotnet_diagnostic.CA1819.severity = none # Duplicate of MA0016 - CA only applies to arrays
dotnet_diagnostic.CA1822.severity = none # Duplicate of MA0038 - CA supports more cases and can be configured to only run against specific API surfaces
dotnet_diagnostic.CA1822.severity = none # Duplicate of MA0041 - CA supports more cases and can be configured to only run against specific API surfaces
dotnet_diagnostic.CA1826.severity = none # Duplicate of MA0020 - MA reports more cases such as List<T>.Find instead of FirstOrDefault
dotnet_diagnostic.CA1827.severity = none # Duplicate of MA0031 - MA reports more Count() optimizations
dotnet_diagnostic.CA1852.severity = none # Duplicate of MA0053 - CA only applies to internal types in assemblies that do not expose internal types and members and - by default - report types that inherit from [Exception] (https://learn.microsoft.com/en-us/dotnet/api/system.exception?WT.mc_id=DT-MVP-5003978), but cannot be configured to report types that define virtual members
dotnet_diagnostic.CA2007.severity = none # Duplicate of MA0004 - MA does not report when the context is needed (WPF, WinForms, Blazor, etc.)
dotnet_diagnostic.CA2016.severity = none # Duplicate of MA0040 - MA rules detects more CancellationToken
dotnet_diagnostic.CA2016.severity = none # Duplicate of MA0032 - MA reports even if there is no CancellationToken available in the current context
dotnet_diagnostic.CA2016.severity = none # Duplicate of MA0079 - MA reports missing CancellationToken in await foreach expressions
dotnet_diagnostic.CA2016.severity = none # Duplicate of MA0080 - MA reports missing CancellationToken in await foreach expressions
dotnet_diagnostic.CA2208.severity = none # Duplicate of MA0015 - MA reports more cases
dotnet_diagnostic.SA1649.severity = none # Duplicate of MA0048 - SA supports configuration of file naming convention and skips partial classes
dotnet_diagnostic.S6580.severity = none # Duplicate of MA0011 - S6580 only applies to parse methods, and also reports diagnostic when null is passed as value for format provider argument.

# Disabled because they are duplicates of other rules
dotnet_diagnostic.SYSLIB1045.severity = none # Use GeneratedRegexAttribute to generate the regular expression implementation at compile time.
dotnet_diagnostic.MA0053.severity = none # Make class sealed
dotnet_diagnostic.MA0026.severity = none # TODO
dotnet_diagnostic.VSTHRD103.severity = none # Call async methods when in an async method
dotnet_diagnostic.S6966.severity = none # Awaitable method should be used
dotnet_diagnostic.SS033.severity = none # AsyncOverloadsAvailable
dotnet_diagnostic.S1144.severity = none # Remove the unused private method 'GetTimeHistogramAsync'.
dotnet_diagnostic.S1006.severity = none # Add the default parameter value defined in the overridden method.
dotnet_diagnostic.S3887.severity = none # Use an immutable collection or reduce the accessibility of the non-private readonly field
dotnet_diagnostic.S2386.severity = none # Use an immutable collection or reduce the accessibility of the public static field
dotnet_diagnostic.DOC104.severity = none # Prefer '<see langword="keyword"/>' to '<c>keyword</ c>' for referencing language keywords
dotnet_diagnostic.CA2211.severity = none # Non-constant fields should not be visible
dotnet_diagnostic.SS017.severity = none # StructWithoutElementaryMethodsOverridden
dotnet_diagnostic.S3963.severity = none # "static" fields should be initialized inline
dotnet_diagnostic.S4070.severity = none # Non-flags enums should not be marked with "FlagsAttribute"
dotnet_diagnostic.S2344.severity = none # Enumeration type names should not have "Flags" or "Enum" suffixes
dotnet_diagnostic.RCS1194.severity = none # Implement exception constructors
dotnet_diagnostic.SS058.severity = none # A string was concatenated in a loop which introduces intermediate allocations. Consider using a StringBuilder or pre-allocated string instead.
dotnet_diagnostic.IDISP010.severity = none # Call base.Dispose(disposing)
dotnet_diagnostic.IDISP009.severity = none # Add IDisposable interface
dotnet_diagnostic.CA1031.severity = none # Modify 'GetTable' to catch a more specific allowed exception type, or rethrow the exception
dotnet_diagnostic.SS051.severity = none # A lock was obtained on _multipartState but the field is mutable. This can lead to deadlocks when a new value is assigned.
dotnet_diagnostic.S3971.severity = none # Do not call 'GC.SuppressFinalize'
dotnet_diagnostic.RCS1102.severity = none # Make class static
dotnet_diagnostic.CA1063.severity = none # Ensure that '<Dispose>' is declared as public and sealed
dotnet_diagnostic.S927.severity = none # Rename parameter 'token' to 'cancellationToken' to match the base class declaration
dotnet_diagnostic.S2346.severity = none # Rename 'Unknown' to 'None'
dotnet_diagnostic.MA0134.severity = none # Observe result of async calls
dotnet_diagnostic.EPC13.severity = none # The result of type 'Task' should be observed
dotnet_diagnostic.S2376.severity = none # Provide a getter for 'Status' or replace the property with a 'SetStatus' method.
dotnet_diagnostic.IDISP006.severity = none # Implement IDisposable
dotnet_diagnostic.EPC12.severity = none # Suspicious exception handling: only 'e. Message' is observed in the catch block
dotnet_diagnostic.MA0077.severity = none # A class that provides Equals(T) should implement IEquatable<T>
dotnet_diagnostic.S3897.severity = none # Implement 'IEquatable<Primitive>'.
dotnet_diagnostic.RCS1001.severity = none # Add braces to using statement (when expression spans over multiple lines)
dotnet_diagnostic.MA0071.severity = none # Avoid using redundant else
dotnet_diagnostic.RCS1234.severity = none # Duplicate enum value
dotnet_diagnostic.S2930.severity = none # Dispose '_stoppingCts' when it is no longer needed.
dotnet_diagnostic.RCS1213.severity = none # Remove unused field declaration
dotnet_diagnostic.RCS1135.severity = none # Declare enum member with zero value (when enum has FlagsAttribute)
dotnet_diagnostic.DOC100.severity = none # Place text in paragraphs
dotnet_diagnostic.RCS1085.severity = none # Use auto-implemented property
dotnet_diagnostic.RCS1234.severity = none # Duplicate enum value
dotnet_diagnostic.RCS1187.severity = none # Use constant instead of field
dotnet_diagnostic.RCS1169.severity = none # Make field read-only
dotnet_diagnostic.RCS1261.severity = none # Resource can be disposed asynchronously
dotnet_diagnostic.RCS1073.severity = none # Convert 'if' to 'return' statement
dotnet_diagnostic.RCS1077.severity = none # Optimize LINQ method call
dotnet_diagnostic.RCS1192.severity = none # Unnecessary usage of verbatim string literal
dotnet_diagnostic.RCS1015.severity = none # Use nameof operator
dotnet_diagnostic.RCS1218.severity = none # Simplify code branching
dotnet_diagnostic.RCS1118.severity = none # Mark local variable as const
dotnet_diagnostic.CA1008.severity = none # In enum TestFlags, change the name of Unknown to 'None'
dotnet_diagnostic.CA1064.severity = none # Exceptions should be public

# Disabled because they are deprecated
dotnet_diagnostic.MA0038.severity = none # Make method static (deprecated, use CA1822 instead)
dotnet_diagnostic.MA0018.severity = none # Do not declare static members on generic types (deprecated; use CA1000 instead)
dotnet_diagnostic.RCS1063.severity = none # ([deprecated] Use RCS1252 instead) Use while statement to create an infinite loop

# Broken analyzer rules
dotnet_diagnostic.GU0071.severity = none # Implicit casting done by the foreach
dotnet_diagnostic.HLQ013.severity = none # Consider using 'foreach' loop instead of 'for' loop for iterating over System.ReadOnlySpan<ushort>
dotnet_diagnostic.HLQ004.severity = none # The enumerator returns a reference to the item. Add 'ref readonly' to the item type
dotnet_diagnostic.HLQ005.severity = none # Avoid the use of 'Single'. Use 'First' instead.
dotnet_diagnostic.REFL040.severity = none # Prefer targetPropType. IsAssignableFrom. IsInstanceOfType(value)

# Other disabled rules
dotnet_diagnostic.SS007.severity = none # FlagsEnumValuesAreNotPowersOfTwo
dotnet_diagnostic.GU0011.severity = none # Don't ignore the returned value
dotnet_diagnostic.CA1716.severity = none # Identifiers should not match keywords
dotnet_diagnostic.MA0049.severity = none # Type name should not match containing namespace
dotnet_diagnostic.CS1591.severity = none # Missing XML comment for publicly visible type or member 'Type_or_Member'
dotnet_diagnostic.CA1028.severity = none # Enum storage should be Int32
dotnet_diagnostic.CA1711.severity = none # Identifiers should not have incorrect suffix
dotnet_diagnostic.CA2217.severity = none # Do not mark enums with FlagsAttribute
dotnet_diagnostic.SS4070.severity = none # Non-flags enums should not be marked with "FlagsAttribute"
dotnet_diagnostic.SS2344.severity = none # Enumeration type names should not have "Flags" or "Enum" suffixes
dotnet_diagnostic.S125.severity = none # Sections of code should not be commented out
dotnet_diagnostic.MA0009.severity = none # Add regex evaluation timeout
dotnet_diagnostic.MA0051.severity = none # Method is too long
dotnet_diagnostic.MA0003.severity = none # Add parameter name to improve readability
dotnet_diagnostic.CA1720.severity = none # Identifiers should not contain type names
dotnet_diagnostic.SS036.severity = none # ExplicitEnumValues
dotnet_diagnostic.SS018.severity = none # SwitchDoesNotHandleAllEnumOptions
dotnet_diagnostic.S101.severity = none # Rename record struct '<name>' to match pascal case naming rules, consider using '<name>'.
dotnet_diagnostic.GU0009.severity = none # Name the boolean argument
dotnet_diagnostic.GU0052.severity = none # Mark exception with [Serializable]
dotnet_diagnostic.CA1707.severity = none # Identifiers should not contain underscores
dotnet_diagnostic.S907.severity = none # Remove this use of 'goto'
dotnet_diagnostic.CA1062.severity = none # Validate arguments of public methods
dotnet_diagnostic.RCS1141.severity = none # Add 'param' element to documentation comment
dotnet_diagnostic.RCS1142.severity = none # Add 'typeparam' element to documentation comment
dotnet_diagnostic.RCS1003.severity = none # Add braces to if-else (when expression spans over multiple lines)
dotnet_diagnostic.S1172.severity = none # Remove this unused method parameter 'sender'.
dotnet_diagnostic.RCS1161.severity = none # Enum should declare explicit values
dotnet_diagnostic.GU0077.severity = none # Prefer is null
dotnet_diagnostic.S3236.severity = none # Caller information arguments should not be provided explicitly
dotnet_diagnostic.S1994.severity = none # "for" loop increment clauses should modify the loops' counters
dotnet_diagnostic.S127.severity = none # Do not update the loop counter 'i' within the loop body
dotnet_diagnostic.S3267.severity = none # Loops should be simplified using the "Where" LINQ method
dotnet_diagnostic.CA1308.severity = none # Normalize strings to uppercase
dotnet_diagnostic.SS003.severity = none # DivideIntegerByInteger
dotnet_diagnostic.CA1024.severity = none # Use properties where appropriate
dotnet_diagnostic.MA0006.severity = none # Use String.Equals instead of equality operator
dotnet_diagnostic.S1104.severity = none # Make this field 'private' and encapsulate it in a 'public' property
dotnet_diagnostic.HLQ012.severity = none # Consider using CollectionsMarshal. AsSpan() instead of foreach with List<System. Action<Chronos. SDK. Web. Datatables. AjaxDatatables. DatatablesPartialRenderingService>>
dotnet_diagnostic.S3011.severity = none # Make sure that this accessibility bypass is safe here
dotnet_diagnostic.S3459.severity = none # Remove unassigned auto-property 'NullString', or set its value.
dotnet_diagnostic.SS023.severity = none # An exception is thrown from the getter of property Length
dotnet_diagnostic.CA2326.severity = none # Deserializing JSON when using a TypeNameHandling value other than None can be insecure.
dotnet_diagnostic.MA0046.severity = none # The delegate must have 2 parameters
dotnet_diagnostic.REFL017.severity = none # Don't use name of wrong member. Expected: "Value"
dotnet_diagnostic.CA1805.severity = none # Member '<member>' is explicitly initialized to its default value
dotnet_diagnostic.CA1712.severity = none # Do not prefix enum values with the name of the enum type 'Level'

# Rules we don't want to follow in Chronos
dotnet_diagnostic.MA0016.severity = none # Prefer using collection abstraction instead of implementation
dotnet_diagnostic.S4136.severity = none # Method overloads should be grouped together
dotnet_diagnostic.S1199.severity = none # Nested code blocks should not be used
dotnet_diagnostic.GU0060.severity = none # Enum member value conflict
dotnet_diagnostic.MA0016.severity = none # Prefer using collection abstraction instead of implementation
dotnet_diagnostic.CA1040.severity = none # Avoid empty interfaces
dotnet_diagnostic.HLQ003.severity = none # Consider returning 'IReadOnlyList`1' instead
dotnet_diagnostic.CA5394.severity = none # Random is an insecure random number generator. Use cryptographically secure random number generators when randomness is required for security.
dotnet_diagnostic.CA5351.severity = none # HashingStream uses a broken cryptographic algorithm MD5
dotnet_diagnostic.S1066.severity = none # Merge this if statement with the enclosing one
dotnet_diagnostic.CA1051.severity = none # Do not declare visible instance fields
dotnet_diagnostic.CA1303.severity = none # Method '<method>' passes a literal string as parameter '<parameter>' of a call to '<method>'. Retrieve the following string(s) from a resource table instead: "<string>".
dotnet_diagnostic.S3358.severity = none # Extract this nested ternary operation into an independent statement.
dotnet_diagnostic.RCS1075.severity = none # Avoid empty catch clause that catches System.Exception
dotnet_diagnostic.S2699.severity = none # Add at least one assertion to this test case.
dotnet_diagnostic.CA5350.severity = none # _hasher uses a weak cryptographic algorithm SHA1
dotnet_diagnostic.S1075.severity = none # Refactor your code not to use hardcoded absolute paths or URIs.
dotnet_diagnostic.GU0076.severity = none # Merge pattern
dotnet_diagnostic.RCS1175.severity = none # Unused 'this' parameter 'buildBase'
dotnet_diagnostic.CA1019.severity = none # Define accessors for attribute arguments

# Needs review
dotnet_diagnostic.CA2227.severity = none # Collection properties should be read only
dotnet_diagnostic.MA0004.severity = none # Use Task. ConfigureAwait(false) if the current SynchronizationContext is not needed
dotnet_diagnostic.CA1401.severity = none # P/ Invoke method 'RtlFillMemory' should not be visible
dotnet_diagnostic.S4200.severity = none # Make this native method private and provide a wrapper.
dotnet_diagnostic.AsyncFixer01.severity = none # The method '<method>' does not need to use async/ await.
dotnet_diagnostic.CA1054.severity = none # URI parameters should not be strings
dotnet_diagnostic.CA1055.severity = none # URI return values should not be strings
dotnet_diagnostic.CA1056.severity = none # Change the type of property 'TableAjaxModel. Url' from 'string' to 'System. Uri'
dotnet_diagnostic.CA2234.severity = none # Modify 'ContentHelper. GetContentAsync(IFileProvider, HttpClient, string, string)' to call 'HttpClient. GetStringAsync(Uri)' instead of 'HttpClient. GetStringAsync(string)'
dotnet_diagnostic.MA0075.severity = none # Do not use implicit culture-sensitive ToString

# Enforced rules
dotnet_diagnostic.MA0103.severity = error # Use SequenceEqual instead of equality operator
#dotnet_diagnostic.CA1032.severity = error # Implement standard exception constructors
#dotnet_diagnostic.CA1810.severity = error # Initialize reference type static fields inline
dotnet_diagnostic.CA1823.severity = error # Avoid unused private fields
dotnet_diagnostic.GU0073.severity = error # Member of non-public type should be internal
dotnet_diagnostic.IDISP024.severity = error # Don't call GC.SuppressFinalize(this) when the type is sealed and has no finalizer
dotnet_diagnostic.MA0023.severity = error # Add RegexOptions.ExplicitCapture
dotnet_diagnostic.MA0144.severity = error # Use System.OperatingSystem to check the current OS
dotnet_diagnostic.REFL008.severity = error # Specify binding flags for better performance and less fragile code
#dotnet_diagnostic.S1135.severity = error # Track uses of "TODO" tags
dotnet_diagnostic.S1450.severity = error # Private fields only used as local variables in methods should become local variables
dotnet_diagnostic.S2325.severity = error # Methods and properties that don't access instance data should be static
dotnet_diagnostic.S3260.severity = error # Non-derived "private" classes and records should be "sealed"
dotnet_diagnostic.S3376.severity = error # Attribute, EventArgs, and Exception type names should end with the type being extended
dotnet_diagnostic.S3871.severity = error # Exception types should be "public"
dotnet_diagnostic.S6605.severity = error # Collection-specific "Exists" method should be used instead of the "Any" extension
#dotnet_diagnostic.SS044.severity = error # AttributeMustSpecifyAttributeUsage
dotnet_diagnostic.S1871.severity = error # Either merge this branch with the identical one on line 22 or change one of the implementations.
dotnet_diagnostic.SS002.severity = error # Use DateTime. UtcNow to get a locale-independent value
dotnet_diagnostic.MA0132.severity = error # Do not convert implicitly to DateTimeOffset
dotnet_diagnostic.CA1034.severity = error # Do not nest type ExampleArtifact. Alternatively, change its accessibility so that it is not externally visible.
#dotnet_diagnostic.CA5392.severity = error # The method CommandLineToArgvW didn't use DefaultDllImportSearchPaths attribute for P/ Invokes.
dotnet_diagnostic.S2234.severity = error # Parameters to 'Equal' have the same names but not the same order as the method arguments
dotnet_diagnostic.IDISP023.severity = error # Don't use reference types in finalizer context
#dotnet_diagnostic.ERP022.severity = error # An exit point 'return false;' swallows an unobserved exception
#dotnet_diagnostic.CA1416.severity = error # This call site is reachable on all platforms. 'RegistryKey. SetValue(string?, object)' is only supported on: 'windows'.
dotnet_diagnostic.S1206.severity = error # This struct overrides 'GetHashCode' and should therefore also override 'Equals'.
dotnet_diagnostic.S1121.severity = error # Extract the assignment of '<variable>' from this expression
dotnet_diagnostic.S2292.severity = error # Make this an auto-implemented property and remove its backing field.
dotnet_diagnostic.CA2225.severity = error # Provide a method named 'ToIntPtr' or 'FromMemoryRegion' as an alternate for operator op_Implicit
dotnet_diagnostic.S3869.severity = error # Refactor the code to remove this use of 'SafeHandle. DangerousGetHandle'
dotnet_diagnostic.S3447.severity = error # Remove the 'Optional' attribute, it cannot be used with 'out'.
#dotnet_diagnostic.CA2101.severity = error # Specify marshaling for P/ Invoke string arguments
#dotnet_diagnostic.CA1838.severity = error # Avoid 'StringBuilder' parameters for P/ Invokes. Consider using a character buffer instead.
dotnet_diagnostic.MA0099.severity = error # Use Explicit enum value for 'Win32Error' instead of 0
dotnet_diagnostic.CA2018.severity = error # 'Buffer. BlockCopy' expects the number of bytes to be copied for the 'count' argument. Using 'Array. Length' may not match the number of bytes that needs to be copied.
dotnet_diagnostic.S1643.severity = error # Use a StringBuilder instead.
dotnet_diagnostic.S2094.severity = error # Remove this empty class, write its code or make it an "interface"
dotnet_diagnostic.S2223.severity = error # Change the visibility of 'DirectorySeparator' or make it 'const' or 'readonly'
dotnet_diagnostic.S3427.severity = error # This method signature overlaps the one defined on line 339, the default parameter value can't be used
dotnet_diagnostic.CA1802.severity = error # Field '_nullableAttributeFullName' is declared as 'readonly' but is initialized with a constant value. Mark this field as 'const' instead
dotnet_diagnostic.S6673.severity = error # Template placeholders should be in the right order: placeholder 'Arguments' does not match with argument 'process. StartInfo. WorkingDirectory'.
dotnet_diagnostic.MA0008.severity = error # Add StructLayoutAttribute
dotnet_diagnostic.S1264.severity = error # Replace this 'for' loop with a 'while' loop.
dotnet_diagnostic.CA1851.severity = error # Possible multiple enumerations of 'IEnumerable' collection. Consider using an implementation that avoids multiple enumerations.
dotnet_diagnostic.S3246.severity = error # Add the 'out' keyword to parameter 'T' to make it 'covariant'.
dotnet_diagnostic.S2933.severity = error # Make '_serializer' 'readonly'.
dotnet_diagnostic.CA1835.severity = error # Change the 'ReadAsync' method call to use the 'Stream. ReadAsync(Memory<byte>, CancellationToken)' overload
dotnet_diagnostic.S2326.severity = error # 'TKey' is not used in the interface
dotnet_diagnostic.SS008.severity = error # GetHashCode() refers to mutable property Value
dotnet_diagnostic.CA1844.severity = error # 'SerializingJsonReadStream' overrides array-based 'ReadAsync' but does not override memory-based 'ReadAsync'. Consider overriding memory-based 'ReadAsync' to improve performance.
dotnet_diagnostic.CA2215.severity = error # Ensure that method 'void SerializingJsonReadStream. Dispose(bool disposing)' calls 'base. Dispose(bool)' in all possible control flow path
dotnet_diagnostic.S3881.severity = error # Fix this implementation of 'IDisposable' to conform to the dispose pattern
dotnet_diagnostic.S6562.severity = error # Provide the "DateTimeKind" when creating this object
dotnet_diagnostic.xUnit2013.severity = error # Do not use Assert. Equal() to check for collection size. Use Assert. Single instead.
dotnet_diagnostic.S4035.severity = error # Seal class 'UserProfile' or implement 'IEqualityComparer<T>' instead
dotnet_diagnostic.S1854.severity = error # Remove this useless assignment to local variable 'count'
dotnet_diagnostic.S2953.severity = error # Either implement 'IDisposable. Dispose', or totally rename this method to prevent confusion
dotnet_diagnostic.S6602.severity = error # "Array. Find" static method should be used instead of the "FirstOrDefault" extension method
dotnet_diagnostic.S6603.severity = error # The collection-specific "TrueForAll" method should be used instead of the "All" extension
#dotnet_diagnostic.CA1806.severity = error # Chmod calls chmod but does not use the HRESULT or error code that the method returns. This could lead to unexpected behavior in error conditions or low-resource situations. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.
dotnet_diagnostic.S2486.severity = error # Handle the exception or explain in a comment why it can be ignored.
dotnet_diagnostic.S1186.severity = error # Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.
dotnet_diagnostic.S2306.severity = error # Rename 'async' to not use a contextual keyword as an identifier
dotnet_diagnostic.S4581.severity = error # Use 'Guid. NewGuid()' or 'Guid. Empty' or add arguments to this GUID instantiation
dotnet_diagnostic.MA0055.severity = error # Do not use finalizer
dotnet_diagnostic.S6667.severity = error # Logging in a catch clause should pass the caught exception as a parameter.
dotnet_diagnostic.S2445.severity = error # Do not lock on writable field '_multipartState', use a readonly field instead
dotnet_diagnostic.S2629.severity = error # Don't use string interpolation in logging message templates
dotnet_diagnostic.MA0060.severity = error # The value returned by 'Read' is not used
dotnet_diagnostic.S2589.severity = error # Change this condition so that it does not always evaluate to 'True'.
dotnet_diagnostic.CA1849.severity = error # 'StreamExtensions. ToByteArray(Stream, int)' synchronously blocks. Await 'StreamExtensions. ToByteArrayAsync(Stream, int, CancellationToken)' instead.
dotnet_diagnostic.SS059.severity = error # MemoryStream can be disposed of asynchronously
dotnet_diagnostic.S5445.severity = error # 'Path. GetTempFileName()' is insecure. Use 'Path. GetRandomFileName()' instead
dotnet_diagnostic.S1939.severity = error # 'IModule' implements 'IDisposable' so 'IDisposable' can be removed from the inheritance list
dotnet_diagnostic.CA1044.severity = error # Because property Status is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method
dotnet_diagnostic.S2365.severity = error # Refactor 'DataTypeNames' into a method, properties should not copy collections.
dotnet_diagnostic.CA2012.severity = error # ValueTask instances should not have their result directly accessed unless the instance has already completed. Unlike Tasks, calling Result or GetAwaiter().GetResult() on a ValueTask is not guaranteed to block until the operation completes. If you can't simply await the instance, consider first checking its IsCompleted property (or asserting it's true if you know that to be the case).
dotnet_diagnostic.CA1065.severity = error # get_Item creates an exception of type IndexOutOfRangeException, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception
dotnet_diagnostic.S112.severity = error # 'System. IndexOutOfRangeException' should not be thrown by user code
dotnet_diagnostic.SS004.severity = error # Type Table is used in a collection lookup but does not override Equals() and GetHashCode()
dotnet_diagnostic.S2345.severity = error # Initialize all the members of this 'Flags' enumeration.
dotnet_diagnostic.CA2231.severity = error # Implement the equality operators and make their behavior identical to that of the Equals method
dotnet_diagnostic.CA1001.severity = error # Type 'BitArraySerializationBenchmark' owns disposable field(s) '_ms' but is not disposable
dotnet_diagnostic.S1118.severity = error # Add a 'protected' constructor or the 'static' keyword to the class declaration.
dotnet_diagnostic.S2692.severity = error # 0 is a valid index, but this check ignores it.
dotnet_diagnostic.GU0061.severity = error # Enum member value will overflow
dotnet_diagnostic.CA1513.severity = error # Use 'ObjectDisposedException. ThrowIf' instead of explicitly throwing a new exception instance
dotnet_diagnostic.MA0061.severity = error # Method overrides should not change default values (original: null; current: <no default value>)
dotnet_diagnostic.xUnit2029.severity = error # Do not use Assert. Empty() to check if a value does not exist in a collection. Use Assert. DoesNotContain() instead
dotnet_diagnostic.S2971.severity = error # Drop this useless call to 'ToList' or replace it by 'AsEnumerable' if you are using LINQ to Entities.
dotnet_diagnostic.S6608.severity = error # Indexing at 0 should be used instead of the "Enumerable" extension method "First"
dotnet_diagnostic.S4487.severity = error # Remove this unread private field '_config' or refactor the code to use its value.
dotnet_diagnostic.S1694.severity = error # Convert this 'abstract' class to an interface
#dotnet_diagnostic.HLQ001.severity = error # 'Dictionary' has a value type enumerator. Assigning it to 'IDictionary' causes boxing of the enumerator.
dotnet_diagnostic.S3218.severity = error # Rename this method to not shadow the outer class' member with the same name.
dotnet_diagnostic.CA1033.severity = error # Make 'DatatablesResponse' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'Chronos. SDK. Web. Datatables. AjaxDatatables. Model. IDatatablesResponse. GetDataObjects' and is visible to derived classes
dotnet_diagnostic.SS038.severity = error # HttpContext was stored in a field. Use IHttpContextAccessor instead
dotnet_diagnostic.S2583.severity = error # Change this condition so that it does not always evaluate to 'False'. Some code paths are unreachable.
dotnet_diagnostic.GU0014.severity = error # Prefer using parameter
#dotnet_diagnostic.S2955.severity = error # Use a comparison to 'default(T)' instead or add a constraint to 'T' so that it can't be a value type.
dotnet_diagnostic.CA1721.severity = error # The property name 'ErrorMessage' is confusing given the existence of method 'GetErrorMessage'. Rename or remove one of these members.
#dotnet_diagnostic.SS019.severity = error # Switch should have default label.
dotnet_diagnostic.S108.severity = error # Either remove or fill this block of code.
dotnet_diagnostic.CA2000.severity = error # Call System. IDisposable. Dispose on object created by 'out Request request' before all references to it are out of scope
dotnet_diagnostic.CA2213.severity = error # 'WrappingDelegateStream' contains field 'InnerStream' that is of IDisposable type 'Stream', but it is never disposed. Change the Dispose method on 'WrappingDelegateStream' to call Close or Dispose on this field.
dotnet_diagnostic.GU0019.severity = error # The call never returns null
dotnet_diagnostic.CA1725.severity = error # In member bool ExtractorRunner<TExtractor, TOutput>.TryRun(out TOutput? output), change parameter name output to extractor in order to match the identifier as it has been declared in bool IExtractorRunner<TExtractor, TOutput>.TryRun(out TOutput? extractor)
dotnet_diagnostic.VSTHRD110.severity = error # Observe the awaitable result of this method call by awaiting it, assigning to a variable, or passing it to another method
dotnet_diagnostic.xUnit1026.severity = error # Theory method 'GetTimeoutTestAsync' on test class 'GenericTransportTests' does not use parameter 'name'. Use the parameter, or remove the parameter and associated data.
dotnet_diagnostic.S1751.severity = error # Refactor the containing loop to do more than one iteration
dotnet_diagnostic.IDISP008.severity = error # Don't assign member with injected and created disposables
dotnet_diagnostic.S2139.severity = error # Either log this exception and handle it, or rethrow it with some contextual information
dotnet_diagnostic.S1244.severity = error # Do not check floating point equality with exact values, use a range instead.
dotnet_diagnostic.S1481.severity = error # Remove the unused local variable 'parsed'
dotnet_diagnostic.CA1069.severity = error # The enum member 'NO_ERROR' has the same constant value '0' as member 'ERROR_SUCCESS'
dotnet_diagnostic.CA1700.severity = error # If 'Win32Error. ERROR_LOG_RECORDS_RESERVED_INVALID' is not used in the current implementation, remove it. Otherwise give it a meaningful name.
dotnet_diagnostic.VSTHRD003.severity = error # Avoid awaiting or returning a Task representing work that was not started within your context as that can lead to deadlocks. Start the work within this context, or use JoinableTaskFactory. RunAsync to start the task and await the returned JoinableTask instead.
#dotnet_diagnostic.S6575.severity = error # Use "TimeZoneInfo. FindSystemTimeZoneById" directly instead of "TZConvert. WindowsToIana"
dotnet_diagnostic.S3220.severity = error # Review this call, which partially matches an overload without 'params'. The partial match is 'string[] string. Split(char separator, int count, StringSplitOptions options = StringSplitOptions. None)'.
dotnet_diagnostic.IDISP003.severity = error # Dispose previous before re-assigning
#dotnet_diagnostic.MA0076.severity = error # Do not use implicit culture-sensitive ToString in interpolated strings
dotnet_diagnostic.GU0024.severity = error # Seal type with default member
dotnet_diagnostic.MA0040.severity = error # Use an overload with a CancellationToken, available tokens: ViewContext. HttpContext. RequestAborted
dotnet_diagnostic.RCS1123.severity = error # Add parentheses when necessary
dotnet_diagnostic.RCS1197.severity = error # Optimize StringBuilder. Append call
dotnet_diagnostic.RCS1249.severity = error # Unnecessary null-forgiving operator
dotnet_diagnostic.xUnit2023.severity = error # Do not use Assert. Collection if there is one element in the collection. Use Assert. Single instead.
dotnet_diagnostic.MA0159.severity = error # Use 'Order' instead of 'OrderBy'
dotnet_diagnostic.RCS1246.severity = error # Use element access
dotnet_diagnostic.GU0025.severity = error # Seal type with overridden equality
dotnet_diagnostic.MA0160.severity = error # Use ContainsKey instead of TryGetValue
dotnet_diagnostic.RCS1268.severity = error # Simplify numeric comparison
dotnet_diagnostic.xUnit2022.severity = error # Do not negate your value when calling Assert. True. Call Assert. False without the negation instead.
dotnet_diagnostic.MA0133.severity = error # Use DateTimeOffset instead of relying on the implicit conversion
dotnet_diagnostic.MA0079.severity = error # Specify a CancellationToken using WithCancellation(), available tokens: reportTemplate. Context. RequestAborte
dotnet_diagnostic.MA0052.severity = error # Replace constant Enum. ToString with nameof
dotnet_diagnostic.MA0106.severity = error # Avoid closure by using an overload with the 'factoryArgument' parameter (captured variable: logger, this, s)

# Suggestions
dotnet_diagnostic.RCS1205.severity = suggestion # Order named arguments according to the order of parameters
dotnet_diagnostic.RCS1258.severity = suggestion # Enum flag 'WithVersionOption' is already contained in flag 'Default
dotnet_diagnostic.MA0063.severity = suggestion # Call 'Where' before 'OrderByDescending'
dotnet_diagnostic.RCS1209.severity = suggestion # Order type parameter constraints
dotnet_diagnostic.RCS1163.severity = suggestion # Unused parameter 'filterCriteria'
dotnet_diagnostic.CA1848.severity = suggestion # Use the LoggerMessage delegates

# Compiler errrors (not roslyn analyzers)
dotnet_diagnostic.CS1574.severity = error # XML comment has cref attribute that could not be resolved
dotnet_diagnostic.CS1584.severity = error # XML comment on 'member' has syntactically incorrect cref attribute 'invalid_syntax'
dotnet_diagnostic.CS1581.severity = error # Invalid return type in XML comment cref attribute
dotnet_diagnostic.CS1580.severity = error # Invalid type for parameter 'parameter number' in XML comment cref attribute
dotnet_diagnostic.CS8762.severity = error # Parameter must have a non-null value when exiting in some condition.

# Temp Maybe
# CA1508: Avoid dead conditional code

# Temp enabled

# Temp disable

# Temp duplicate

# Temp dont want

# temp deprecated

# temp broken
dotnet_diagnostic.SS039.severity = none # EnumWithoutDefaultValue
dotnet_diagnostic.GU0017.severity = none # Don't use discarded

# temp review

# temp suggestion
